using System.Collections.Generic;
using System.Linq;
using System.Text;
using Maestria.Extensions;
using Maestria.TypeProviders.Common;

namespace Maestria.TypeProviders.Excel
{
    public class TemplateEngineOptions
    {
        public TemplateEngineOptions(IEnumerable<FieldMapInfo> fields, bool isGlobalNamespace, string @namespace, string className)
        {
            Fields = fields;
            IsGlobalNamespace = isGlobalNamespace;
            Namespace = @namespace;
            ClassName = className;
        }

        public IEnumerable<FieldMapInfo> Fields { get; }
        public bool IsGlobalNamespace { get; }
        public string Namespace { get; }
        public string ClassName { get; }
    }

    public class TemplateEngine
    {
        private readonly TemplateEngineOptions _opts;

        public TemplateEngine(TemplateEngineOptions options)
        {
            _opts = options;
        }

        public string Generate()
        {
            var source = new StringBuilder($@"//----------------------
// <auto-generated>
//     Generated using Maestria.TypeProviders (https://github.com/MaestriaNet/TypeProviders)
// </auto-generated>
//----------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.IO;
using ClosedXML.Excel;
using Maestria.FluentCast;
using Maestria.TypeProviders.Excel;

{(_opts.IsGlobalNamespace ? string.Empty : $"namespace {_opts.Namespace}")}
{(_opts.IsGlobalNamespace ? string.Empty : "{")}
    public partial class {_opts.ClassName}
    {{
");
            var lastColumn = _opts.Fields.Last();
            _opts.Fields.Iterate(x =>
                source.Append($"        {x.GetSourceCode()}{(lastColumn == x ? "" : "\r\n")}"));

            source.Append(
@$"    }}

    public static partial class {_opts.ClassName}Factory
    {{
        public static IEnumerable<{_opts.ClassName}> Load(Stream input, int sheetPosition = 1)
        {{
            using var workbook = new XLWorkbook(input);
            return Load(workbook, sheetPosition, null);
        }}

        public static IEnumerable<{_opts.ClassName}> Load(Stream input, string sheetName)
        {{
            using var workbook = new XLWorkbook(input);
            return Load(workbook, 0, sheetName);
        }}

        public static IEnumerable<{_opts.ClassName}> Load(string filePath, int sheetPosition = 1)
        {{
            using var workbook = ExcelExtensions.OpenWorkbook(filePath);
            return Load(workbook, sheetPosition, null);
        }}

        public static IEnumerable<{_opts.ClassName}> Load(string filePath, string sheetName)
        {{
            using var workbook = ExcelExtensions.OpenWorkbook(filePath);
            return Load(workbook, 0, sheetName);
        }}

        public static IEnumerable<{_opts.ClassName}> Load(XLWorkbook workbook, int sheetPosition = 1, string sheetName = """")
        {{
            var result = new List<{_opts.ClassName}>();
            var sheet = string.IsNullOrEmpty(sheetName) ? workbook.Worksheet(sheetPosition) : workbook.Worksheet(sheetName);
");
            _opts.Fields.Iterate(x =>
                source.Append($"            var indexOf{x.PropertyName} = sheet.ColumnByName(\"{x.SourceName}\");\r\n"));

            source.Append(@$"            foreach (var row in sheet.Rows(2, sheet.RowUsedCount()))
            {{
");
            _opts.Fields.Iterate(x =>
                source.Append($"                var {x.PropertyName.WithFirstCharLower()}Value = row.Cell(indexOf{x.PropertyName}).Value;\r\n"));

            source.Append(@$"                result.Add(new {_opts.ClassName}
                {{
");
            _opts.Fields.Iterate(x =>
                source.Append($"                    {x.PropertyName} = {x.GetCastSourceCode(x.PropertyName.WithFirstCharLower() + "Value")},\r\n"));

            source.Append("                });\r\n");

            source.Append(@$"            }}
            return result;
        }}
    }}
{(_opts.IsGlobalNamespace ? string.Empty : "}")}");
            return source.ToString();
        }
    }
}