//----------------------
// <auto-generated>
//     Generated using Maestria.TypeProviders (https://github.com/MaestriaNet/TypeProviders)
// </auto-generated>
//----------------------

using System;
using System.IO;
using ClosedXML.Excel;

namespace Maestria.TypeProviders.Excel
{
    public static class ExcelExtensions
    {
        /// <summary>
        /// Number of last user column
        /// </summary>
        /// <param name="sheet"></param>
        /// <returns></returns>
        public static int ColumnUsedCount(this IXLWorksheet sheet) => sheet.LastColumnUsed().ColumnNumber();

        /// <summary>
        /// Number of last used row
        /// </summary>
        /// <param name="sheet"></param>
        /// <returns></returns>
        public static int RowUsedCount(this IXLWorksheet sheet) => sheet.LastRowUsed().RowNumber();

        /// <summary>
        /// Retrieve column position by name in first row.
        /// </summary>
        /// <param name="sheet">Page to find column</param>
        /// <param name="columnName">Name to find column in first row</param>
        /// <returns>Position of column name or 0 when not found</returns>
        /// <exception cref="ArgumentNullException">When <paramref name="columnName"/> is null o whitespace</exception>
        public static int ColumnByName(this IXLWorksheet sheet, string columnName)
        {
            if (string.IsNullOrWhiteSpace(columnName)) throw new ArgumentNullException(nameof(columnName), "Enter the column name to get position.");
            if (sheet.RowCount() <= 0)
                return 0;
            for (var i = 1; i <= sheet.ColumnUsedCount(); i++)
                if (sheet.Row(1).Cell(i).Value.ToString()?.ToUpper() == columnName.ToUpper()) return i;
            return 0;
        }

        /// <summary>
        /// Open file with treatment for file in use by another process
        /// </summary>
        /// <param name="filePath"></param>
        /// <returns></returns>
        public static FileStream OpenFile(string filePath)
        {
            try
            {
                return new FileStream(filePath, FileMode.Open, FileAccess.Read);
            }
            catch
            {
                // Need more access permissions to the file already in use by the operating system
                return new FileStream(filePath, FileMode.Open, FileAccess.Read, FileShare.ReadWrite);
            }
        }

        /// <summary>
        /// Open file with treatment for file in use by another process and return XLWorkbook
        /// </summary>
        /// <param name="filePath"></param>
        /// <returns></returns>
        public static XLWorkbook OpenWorkbook(string filePath)
        {
            using var fileStream = OpenFile(filePath);
            return new XLWorkbook(fileStream);
        }
    }
}
