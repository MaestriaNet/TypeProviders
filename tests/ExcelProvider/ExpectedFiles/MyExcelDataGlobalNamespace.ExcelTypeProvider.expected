//----------------------
// <auto-generated>
//     Generated using Maestria.TypeProviders (https://github.com/MaestriaNet/TypeProviders)
// </auto-generated>
//----------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.IO;
using ClosedXML.Excel;
using Maestria.FluentCast;
using Maestria.TypeProviders.Excel;



    public partial class MyExcelDataGlobalNamespace
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public decimal? Value { get; set; }
        public DateTime BirthDate { get; set; }
        public int Prop { get; set; }
        public string CalculatedProp { get; set; }
    }

    public static partial class MyExcelDataGlobalNamespaceFactory
    {
        public static IEnumerable<MyExcelDataGlobalNamespace> Load(Stream input, int sheetPosition = 1)
        {
            using var workbook = new XLWorkbook(input);
            return Load(workbook, sheetPosition, null);
        }

        public static IEnumerable<MyExcelDataGlobalNamespace> Load(Stream input, string sheetName)
        {
            using var workbook = new XLWorkbook(input);
            return Load(workbook, 0, sheetName);
        }

        public static IEnumerable<MyExcelDataGlobalNamespace> Load(string filePath, int sheetPosition = 1)
        {
            using var workbook = ExcelExtensions.OpenWorkbook(filePath);
            return Load(workbook, sheetPosition, null);
        }

        public static IEnumerable<MyExcelDataGlobalNamespace> Load(string filePath, string sheetName)
        {
            using var workbook = ExcelExtensions.OpenWorkbook(filePath);
            return Load(workbook, 0, sheetName);
        }

        public static IEnumerable<MyExcelDataGlobalNamespace> Load(XLWorkbook workbook, int sheetPosition = 1, string sheetName = "")
        {
            var result = new List<MyExcelDataGlobalNamespace>();
            var sheet = string.IsNullOrEmpty(sheetName) ? workbook.Worksheet(sheetPosition) : workbook.Worksheet(sheetName);
            var indexOfId = sheet.ColumnByName("Id");
            var indexOfName = sheet.ColumnByName("Name");
            var indexOfValue = sheet.ColumnByName("Value");
            var indexOfBirthDate = sheet.ColumnByName("Birth Date");
            var indexOfProp = sheet.ColumnByName("Prop");
            var indexOfCalculatedProp = sheet.ColumnByName("Calculated Prop");
            foreach (var row in sheet.Rows(2, sheet.RowUsedCount()))
            {
                var idValue = row.Cell(indexOfId).Value;
                var nameValue = row.Cell(indexOfName).Value;
                var valueValue = row.Cell(indexOfValue).Value;
                var birthDateValue = row.Cell(indexOfBirthDate).Value;
                var propValue = row.Cell(indexOfProp).Value;
                var calculatedPropValue = row.Cell(indexOfCalculatedProp).Value;
                result.Add(new MyExcelDataGlobalNamespace
                {
                    Id = idValue.ToInt32(),
                    Name = nameValue.ToString(),
                    Value = valueValue.ToDecimalSafe(),
                    BirthDate = birthDateValue.ToDateTime(),
                    Prop = propValue.ToInt32(),
                    CalculatedProp = calculatedPropValue.ToString(),
                });
            }
            return result;
        }
    }
